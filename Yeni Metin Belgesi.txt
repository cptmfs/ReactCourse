using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;



class Result
{

    /*
     * Complete the 'maximumNetworks' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY speed
     *  2. INTEGER minComps
     *  3. LONG_INTEGER speedThreshold
     */

    public static int maximumNetworks(List<int> speed, int minComps, long speedThreshold)
    {

    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int speedCount = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> speed = new List<int>();

        for (int i = 0; i < speedCount; i++)
        {
            int speedItem = Convert.ToInt32(Console.ReadLine().Trim());
            speed.Add(speedItem);
        }

        int minComps = Convert.ToInt32(Console.ReadLine().Trim());

        long speedThreshold = Convert.ToInt64(Console.ReadLine().Trim());

        int result = Result.maximumNetworks(speed, minComps, speedThreshold);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
